Search.setIndex({"docnames": ["array_count_sort", "count_sort", "digit_sort", "heap", "index", "insert_sort", "merge_sort", "quick_sort", "two_dim_array_count_sort"], "filenames": ["array_count_sort.rst", "count_sort.rst", "digit_sort.rst", "heap.rst", "index.rst", "insert_sort.rst", "merge_sort.rst", "quick_sort.rst", "two_dim_array_count_sort.rst"], "titles": ["Array Counting Sort Module", "Counting Sort Module", "Digit Sort", "Binary Heap and Sort", "Welcome to Algorithms\u2019s documentation!", "Insertion Sort", "Merge Sort Module", "Quick Sort Module", "Functions"], "terms": {"quick": 4, "sort": [4, 8], "modul": [2, 3, 4, 5, 8], "function": 4, "clst_avg": [4, 7], "median_of_median": [4, 7], "median_of_thre": [4, 7], "partition_smal": [4, 7], "quick_sort": [4, 7], "split": [4, 7], "merg": 4, "merge_sort": [4, 6], "merge_sort_parallel": [4, 6], "insert": [3, 4, 6], "insert_sort": [4, 5], "insert_sort_opt": [4, 5], "index": [0, 3, 4, 7, 8], "search": [4, 5], "page": 4, "A": [2, 3, 5, 6, 7], "algorithm": [0, 1, 2, 3, 5, 6, 7, 8], "list": [0, 1, 2, 3, 5, 6, 7, 8], "element": [1, 3, 5, 6, 7], "i": [0, 1, 2, 3, 5, 6, 7, 8], "simpl": 5, "work": [0, 1, 2, 3, 5, 6, 7], "iter": [3, 5], "through": [3, 5], "input": [1, 2, 3, 5, 6, 7], "each": [1, 3, 5, 6], "compar": [1, 5], "its": [2, 3, 5], "left": [3, 5, 7], "correct": 5, "posit": [2, 5], "within": [5, 7], "alreadi": 5, "portion": [5, 7], "thi": [0, 1, 2, 3, 5, 6, 7, 8], "process": [5, 7], "continu": 5, "until": [3, 5], "entir": 5, "arrai": [1, 2, 3, 4, 5, 6, 7, 8], "float": [0, 3, 4, 5, 6, 7], "us": [0, 1, 2, 3, 5, 6, 7], "optim": 5, "version": [5, 6], "binari": [4, 5], "find": [5, 7], "reduc": [2, 5], "number": [0, 1, 2, 4, 5, 6, 8], "comparison": [3, 5], "improv": 5, "effici": [1, 3, 5, 7], "python_solut": [0, 1, 2, 3, 5, 6, 7, 8], "implement": [1, 3, 5, 6, 7], "The": [1, 2, 3, 5, 6, 7, 8], "worst": [3, 5, 7], "averag": [5, 7], "case": [0, 3, 5, 7], "time": [0, 1, 2, 3, 5, 6, 7], "complex": [2, 3, 5, 6, 7], "o": [0, 1, 2, 3, 5, 6, 7], "n": [2, 3, 5, 6, 7], "2": [0, 2, 5, 7, 8], "space": [0, 3, 5, 6, 7], "1": [1, 2, 3, 5, 8], "done": 5, "place": [3, 5], "new": [5, 6, 7], "contain": [0, 3, 5, 6, 7], "order": [0, 3, 5, 6, 7, 8], "enhanc": 5, "helper": 6, "special": 6, "variou": 6, "two": [3, 6, 7, 8], "singl": [6, 8], "opt": 6, "bool": 6, "true": 6, "If": [3, 6, 8], "optimis": 6, "call": 6, "small": [1, 6, 7], "multiprocess": 6, "part_on": 6, "part_two": 6, "none": [3, 6], "both": [3, 6], "ar": [0, 3, 6, 7, 8], "where": [2, 3, 6], "insid": [0, 1, 2, 6, 7, 8], "combin": 6, "result": [2, 6, 7], "first": 6, "second": 6, "divid": [6, 7], "halv": 6, "recurs": 6, "half": 6, "one": [3, 6], "log": [3, 6, 7], "store": [3, 6], "subarrai": 6, "dure": 6, "switch": 6, "between": [0, 1, 6], "faster": 6, "slower": 6, "without": 6, "default": [0, 2, 3, 6, 8], "parallel": 6, "dynam": 6, "threadpoolexecutor": 6, "provid": [1, 2, 3, 7, 8], "conquer": 7, "select": 7, "pivot": 7, "valu": [0, 1, 2, 3, 7], "part": 7, "pivot_str": 7, "str": [3, 7, 8], "random": 7, "left_edg": 7, "int": [0, 1, 2, 3, 7, 8], "right_edg": 7, "tupl": [3, 7], "rel": 7, "avg": 7, "calcul": [3, 7], "specifi": [2, 3, 7, 8], "rang": [1, 7], "closest": 7, "_quick_sort": 7, "perform": [0, 2, 3, 7], "given": 7, "indic": 7, "right": [3, 7], "median": 7, "bubbl": 7, "three": 7, "start": [2, 7], "end": [3, 7], "exclus": 7, "partit": 7, "repres": [2, 3, 7], "wrapper": 7, "set": 7, "initi": [3, 7], "wide": 7, "strategi": 7, "avail": 7, "import": [2, 7], "consider": 7, "so": [0, 7], "extrem": 7, "rare": 7, "ha": [2, 3, 7], "implic": 7, "practic": 7, "usag": 7, "suffer": 7, "from": [2, 3, 7], "big": 7, "constant": 7, "factor": 7, "which": [0, 2, 3, 7], "make": [3, 7], "impract": 7, "It": [0, 1, 2, 3, 7], "worth": 7, "note": 7, "unstabl": 7, "m3": 7, "mm": 7, "choos": [2, 7], "among": 7, "well": 7, "uniformli": 7, "distribut": 7, "data": [3, 7], "close": 7, "known": 7, "some": 7, "resist": 7, "against": 7, "outlier": 7, "degre": 7, "fulli": 7, "introselect": 7, "consist": [1, 3, 7, 8], "regardless": 7, "less": [3, 7], "than": [0, 2, 3, 7], "move": 7, "greater": [2, 7], "equal": [2, 3, 7], "oper": [3, 7], "boundari": 7, "ref": [], "build": 3, "html": [], "sorts_for_float": [], "ipynb": [], "sorts_for_integ": [], "doc": [], "link": 4, "integ": [0, 2, 4, 8], "anoth": [1, 4], "link_": [], "array_count_sort": [0, 4], "arr": 0, "kei": [0, 8], "0": [0, 3], "dimension": [0, 8], "base": [0, 2, 3], "whole": [0, 1, 8], "row": 0, "matrix": 0, "ascend": [0, 3, 8], "onli": [0, 3], "your": 0, "do": 0, "differ": [0, 1], "biggest": [0, 1], "lowest": 0, "depend": [0, 2], "what": 0, "more": 0, "show": 0, "even": 0, "situat": 0, "when": [0, 1, 2], "blank": 0, "In": 0, "put": 0, "those": 0, "higher": 0, "fill": 0, "count": [2, 4, 8], "occurr": 1, "inform": 1, "creat": 1, "particularli": 1, "size": [1, 3], "count_sort": [1, 4], "an": [1, 2, 3, 8], "emploi": 1, "basic": 1, "max": 1, "min": [1, 3], "how": 1, "mani": 1, "were": 1, "smallest": 1, "specif": 2, "design": 2, "digit_sort": [2, 4], "10": 2, "non": 2, "neg": 2, "to_m_bas": [2, 4], "convert": 2, "decim": 2, "m": 2, "represent": [2, 3], "restore_to_num": [2, 4], "restor": 2, "form": 2, "individu": 2, "least": 2, "signific": 2, "most": 2, "k": 2, "maximum": 2, "ani": [2, 3], "amount": 2, "can": [2, 8], "chang": 2, "henc": 2, "appear": 2, "": 2, "determin": 2, "digit_sort_opt": [2, 4], "radix": 2, "take": 2, "origin": [2, 3], "you": 2, "option": [2, 3, 8], "must": 2, "should": 2, "tree": 3, "structur": 3, "minimum": 3, "root": 3, "parent": 3, "node": 3, "smaller": 3, "children": 3, "extend": 3, "vector": 3, "remov": 3, "other": 3, "relat": 3, "heap_sort": [3, 4], "get_terminal_width": [3, 4], "retriev": 3, "width": 3, "termin": 3, "window": 3, "subprocess": 3, "execut": 3, "tput": 3, "col": 3, "command": 3, "sift_up": [3, 4], "element_index": 3, "sift": 3, "up": 3, "maintain": 3, "properti": 3, "sift_down": [3, 4], "down": 3, "capac": 3, "append": [3, 4], "self": 3, "x": 3, "get_children": [3, 4], "get": 3, "height": [3, 4], "__iter__": 3, "gener": 3, "remove_min": [3, 4], "__repr__": 3, "string": 3, "eras": [3, 4], "alia": 3, "exist": 3, "child": 3, "becom": 3, "after": 3, "increas": 3, "fourth": 3, "decreas": 3, "indexerror": 3, "empti": 3, "obtain": 3, "pixel": 3, "repeatedli": 3, "extract": 3, "larg": 3, "dataset": 3, "howev": 3, "sinc": 3, "requir": 3, "addit": 3, "main": 3, "phase": 3, "heapifi": 3, "ensur": 3, "have": 3, "heap": 4, "class": 4, "two_dim_array_count_sort": [4, 8], "digit": 4, "all": 8, "exact": 8, "thei": 8, "present": 8, "typeerror": 8, "argument": 8, "unsupport": 8, "type": 8}, "objects": {"Algorithms.python_solutions": [[0, 0, 0, "-", "array_count_sort"], [1, 0, 0, "-", "count_sort"], [2, 0, 0, "-", "digit_sort"], [3, 0, 0, "-", "heap"], [5, 0, 0, "-", "insert_sort"], [6, 0, 0, "-", "merge_sort"], [7, 0, 0, "-", "quick_sort"], [8, 0, 0, "-", "two_dim_array_count_sort"]], "Algorithms.python_solutions.array_count_sort": [[0, 1, 1, "", "array_count_sort"]], "Algorithms.python_solutions.count_sort": [[1, 1, 1, "", "count_sort"]], "Algorithms.python_solutions.digit_sort": [[2, 1, 1, "", "digit_sort"], [2, 1, 1, "", "digit_sort_opt"], [2, 1, 1, "", "restore_to_nums"], [2, 1, 1, "", "to_m_based"]], "Algorithms.python_solutions.heap": [[3, 2, 1, "", "Heap"], [3, 1, 1, "", "get_terminal_width"], [3, 1, 1, "", "heap_sort"], [3, 1, 1, "", "sift_down"], [3, 1, 1, "", "sift_up"]], "Algorithms.python_solutions.heap.Heap": [[3, 3, 1, "", "append"], [3, 3, 1, "", "erase"], [3, 3, 1, "", "get_children"], [3, 3, 1, "", "height"], [3, 3, 1, "", "insert"], [3, 3, 1, "", "remove_min"]], "Algorithms.python_solutions.insert_sort": [[5, 1, 1, "", "insert_sort"], [5, 1, 1, "", "insert_sort_opt"]], "Algorithms.python_solutions.merge_sort": [[6, 1, 1, "", "merge"], [6, 1, 1, "", "merge_sort"], [6, 1, 1, "", "merge_sort_parallel"]], "Algorithms.python_solutions.quick_sort": [[7, 1, 1, "", "clst_avg"], [7, 1, 1, "", "median_of_medians"], [7, 1, 1, "", "median_of_three"], [7, 1, 1, "", "partition_small"], [7, 1, 1, "", "quick_sort"], [7, 1, 1, "", "split"]], "Algorithms.python_solutions.two_dim_array_count_sort": [[8, 1, 1, "", "two_dim_array_count_sort"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"]}, "titleterms": {"welcom": 4, "algorithm": 4, "": 4, "document": 4, "content": 4, "indic": 4, "tabl": 4, "insert": 5, "sort": [0, 1, 2, 3, 5, 6, 7], "function": [0, 1, 2, 3, 5, 6, 7, 8], "paramet": [0, 1, 2, 3, 5, 6, 7, 8], "return": [0, 1, 2, 3, 5, 6, 7, 8], "merg": 6, "modul": [0, 1, 6, 7], "quick": 7, "float": [], "some": 4, "experi": 4, "visual": 4, "arrai": 0, "count": [0, 1], "digit": 2, "binari": 3, "heap": 3, "class": 3, "attribut": 3, "method": 3, "rais": [3, 8], "note": []}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"Insertion Sort": [[5, "insertion-sort"]], "Functions": [[5, "functions"], [6, "functions"], [7, "functions"], [0, "functions"], [2, "functions"], [8, "functions"], [1, "functions"], [3, "functions"]], "Parameters": [[5, "parameters"], [5, "id1"], [6, "parameters"], [6, "id1"], [6, "id3"], [7, "parameters"], [7, "id1"], [7, "id3"], [7, "id5"], [7, "id7"], [7, "id9"], [0, "parameters"], [2, "parameters"], [2, "id1"], [2, "id3"], [2, "id5"], [8, "parameters"], [1, "parameters"], [3, "parameters"], [3, "id2"], [3, "id5"], [3, "id9"], [3, "id11"], [3, "id13"]], "Returns": [[5, "returns"], [5, "id2"], [6, "returns"], [6, "id2"], [6, "id4"], [7, "returns"], [7, "id2"], [7, "id4"], [7, "id6"], [7, "id8"], [7, "id10"], [0, "returns"], [2, "returns"], [2, "id2"], [2, "id4"], [2, "id6"], [8, "returns"], [1, "returns"], [3, "returns"], [3, "id1"], [3, "id3"], [3, "id4"], [3, "id6"], [3, "id7"], [3, "id8"], [3, "id10"], [3, "id12"], [3, "id14"]], "Merge Sort Module": [[6, "merge-sort-module"]], "Quick Sort Module": [[7, "quick-sort-module"]], "Array Counting Sort Module": [[0, "array-counting-sort-module"]], "Digit Sort": [[2, "digit-sort"]], "Welcome to Algorithms\u2019s documentation!": [[4, "welcome-to-algorithms-s-documentation"]], "Contents:": [[4, null]], "Some experiments and visualizations": [[4, "some-experiments-and-visualizations"]], "Indices and tables": [[4, "indices-and-tables"]], "Raises": [[8, "raises"], [3, "raises"]], "Counting Sort Module": [[1, "counting-sort-module"]], "Binary Heap and Sort": [[3, "binary-heap-and-sort"]], "Classes": [[3, "classes"]], "Attributes": [[3, "attributes"]], "Methods": [[3, "methods"]]}, "indexentries": {"algorithms.python_solutions.heap": [[3, "module-Algorithms.python_solutions.heap"]], "heap (class in algorithms.python_solutions.heap)": [[3, "Algorithms.python_solutions.heap.Heap"]], "append() (algorithms.python_solutions.heap.heap method)": [[3, "Algorithms.python_solutions.heap.Heap.append"]], "erase() (algorithms.python_solutions.heap.heap method)": [[3, "Algorithms.python_solutions.heap.Heap.erase"]], "get_children() (algorithms.python_solutions.heap.heap method)": [[3, "Algorithms.python_solutions.heap.Heap.get_children"]], "get_terminal_width() (in module algorithms.python_solutions.heap)": [[3, "Algorithms.python_solutions.heap.get_terminal_width"]], "heap_sort() (in module algorithms.python_solutions.heap)": [[3, "Algorithms.python_solutions.heap.heap_sort"]], "height() (algorithms.python_solutions.heap.heap method)": [[3, "Algorithms.python_solutions.heap.Heap.height"]], "insert() (algorithms.python_solutions.heap.heap method)": [[3, "Algorithms.python_solutions.heap.Heap.insert"]], "module": [[3, "module-Algorithms.python_solutions.heap"]], "remove_min() (algorithms.python_solutions.heap.heap method)": [[3, "Algorithms.python_solutions.heap.Heap.remove_min"]], "sift_down() (in module algorithms.python_solutions.heap)": [[3, "Algorithms.python_solutions.heap.sift_down"]], "sift_up() (in module algorithms.python_solutions.heap)": [[3, "Algorithms.python_solutions.heap.sift_up"]]}})